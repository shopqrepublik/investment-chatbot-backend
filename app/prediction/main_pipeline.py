# app/prediction/main_pipeline.py
class PredictionPipeline:
    def __init__(self, db_session):
        self.db = db_session
        self.data_collector = AdvancedDataCollector()
        self.feature_engineer = AdvancedFeatureEngineer() 
        self.predictor = MultiHorizonPredictor()
        self.recommendation_engine = AdvancedRecommendationEngine()
    
    async def run_full_analysis(self, tickers=None, horizons=['3m', '6m', '12m']):
        """–ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –∞–Ω–∞–ª–∏–∑–∞"""
        print("üéØ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
        
        # 1. –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
        print("üìä –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö...")
        ticker_data = await self.data_collector.collect_comprehensive_data(tickers)
        
        # 2. Feature Engineering
        print("üîß –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤...")
        features = self.feature_engineer.create_all_features(ticker_data)
        
        # 3. –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
        print("ü§ñ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ...")
        predictions = {}
        for horizon in horizons:
            predictions[horizon] = await self.predictor.predict(
                features, horizon=horizon
            )
        
        # 4. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print("üí° –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...")
        recommendations = self.recommendation_engine.generate_recommendations(
            predictions, horizons
        )
        
        return {
            'success': True,
            'predictions': predictions,
            'recommendations': recommendations,
            'timestamp': datetime.now().isoformat()
        }